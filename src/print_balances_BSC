require('dotenv').config();

const ethers = require('ethers');
const csv = require('csv-parser');
const fs = require('fs');
const config = require('../config.json');
const { createContractInstance } = require('./contracts');
const { formatTokenBalance, formatEtherBalance } = require('./utils');
const getBlockNumberBSC = require('./getBlocknumberBSC');
const ProgressBar = require('progress');

async function getTokenBalancesAtBlock(addresses, blockHeight, provider) {

  const bar = new ProgressBar('Processing [:bar] :percent :etas', {
    total: addresses.length,
    width: 30,
    complete: '=',
    incomplete: ' ',
    renderThrottle: 100,
  });

  const contracts = {
    USDT: createContractInstance(config.tokens_BSC.USDT, provider),
  };

  const tokenBalances = {};

  for (const address of addresses) {
    const balancePromises = [
      ...Object.entries(contracts).map(async ([token, contract]) => {
        const balance = await contract.balanceOf(address, { blockTag: blockHeight }).then((b) => b.toString());
        return { token, balance };
      }),
      provider.getBalance(address, blockHeight).then((b) => b.toString()),
    ];

    const balances = await Promise.all(balancePromises);

    tokenBalances[address] = balances.reduce((acc, curr, index) => {
      if (index < balances.length - 1) {
        const { token, balance } = curr;
        let decimals;
        if (token === 'USDC' || token === 'POWR' || token === 'AXL') {
          decimals = 6;
        } else if (token === 'GALA' || token === 'CVC' || token === 'CRO') {
          decimals = 8;
        } else if (token === 'EVX') {
          decimals = 4;
        } else {
          decimals = 18;
        }
        acc[token] = formatTokenBalance(balance, decimals);
      } else {
        acc.ETH = formatEtherBalance(curr);
      }
      return acc;
    }, {});

    // Update the progress bar
    bar.tick();
  }

  return tokenBalances;
}

async function main() {
  const addresses = [];

  fs.createReadStream('data/addresses.csv')
    .pipe(csv())
    .on('data', (row) => {
      addresses.push(row.address.toLowerCase());
    })
    .on('end', async () => {
      console.log(`Retrieving balances for ${addresses.length} addresses...`);

      const provider = new ethers.providers.StaticJsonRpcProvider(`https://rpc.ankr.com/bsc/${process.env.ANKR_API_KEY}/`);
      const blockInfo = await getBlockNumberBSC();
      const blockNumber = blockInfo.block;      
            
      const tokenBalances = await getTokenBalancesAtBlock(addresses, blockNumber, provider);

      const csvData = ['address,USDT,USDC,ETH,FTM,MATIC,LINK,SAND,MANA,AXS,ONE_INCH,AAVE,ALPHA,APE,BAT,CHZ,COMP,CRO,CRV,CVX,DAI,DYDX,ENJ,ENS,GALA,GLM,GRT,GT,ILV,IMX,KUB,LDO,LRC,MKR,OCEAN,OMG,SNT,SNX,SUSHI,UNI,YFI,ABT,AXL,BAL,BOBA,CVC,DOGE,EVX,FTT,GAL,GF,GHST,GODS,KNC2,LYXE,POWR,RDN,STG,YGG,ZRX,JFIN'].concat(
        Object.entries(tokenBalances).map(([address, balances]) =>
          `${address},${balances.USDT},${balances.USDC},${balances.ETH},${balances.FTM},${balances.MATIC},${balances.LINK},${balances.SAND},${balances.MANA},${balances.AXS},${balances.ONE_INCH},${balances.AAVE},${balances.ALPHA},${balances.APE},${balances.BAT},${balances.CHZ},${balances.COMP},${balances.CRO},${balances.CRV},${balances.CVX},${balances.DAI},${balances.DYDX},${balances.ENJ},${balances.ENS},${balances.GALA},${balances.GLM},${balances.GRT},${balances.GT},${balances.ILV},${balances.IMX},${balances.KUB},${balances.LDO},${balances.LRC},${balances.MKR},${balances.OCEAN},${balances.OMG},${balances.SNT},${balances.SNX},${balances.SUSHI},${balances.UNI},${balances.YFI},${balances.ABT},${balances.AXL},${balances.BAL},${balances.BOBA},${balances.CVC},${balances.DOGE},${balances.EVX},${balances.FTT},${balances.GAL},${balances.GF},${balances.GHST},${balances.GODS},${balances.KNC2},${balances.LYXE},${balances.POWR},${balances.RDN},${balances.STG},${balances.YGG},${balances.ZRX},${balances.JFIN}`)
      );

      fs.writeFileSync('data/ETH_Mainnet_Balances.csv', csvData.join('\n'));
      console.log('The balances have been written to ETH_Mainnet_Balances.csv');
    });
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
